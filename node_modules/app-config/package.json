{
  "name": "app-config",
  "version": "0.1.4",
  "description": "Simple utility for Node.js to load configuration files depending on your environment",
  "main": "./index.js",
  "scripts": {
    "test": "mocha --reporter spec test/test.js"
  },
  "keywords": [
    "app",
    "config",
    "environment"
  ],
  "author": {
    "name": "Pavel Lobodinsk√Ω",
    "email": "pavel.lobo@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/lobodpav/node-app-config.git"
  },
  "bugs": {
    "url": "https://github.com/lobodpav/node-app-config/issues?state=open"
  },
  "readmeFilename": "README.md",
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.17.1",
    "should": "3.1.2"
  },
  "readme": "# app-config\n\nConfiguration-loader utility for `Node.js` to load different set of configuration files depending on your execution environment.\n\nSimply prepare your configuration files and call `require('app-config')`. Available configurations and environments are determined dynamically, based on your directory and file structures.\n\n# Introduction\n\nIn Java environment, `classpath` is used to 'inject' paths of right configuration files.\n\nIn Javascript world, there is nothing like `classpath`. This tool is here to solve your multi-environment configuration problem.\n\n# Quick intro to usage\n\nCreate database config file for `dev` environment\n\n```\n/app_root/config/dev/db.js\n```\n\nGive the config file some content\n\n```js\nmodule.exports = {\n    hostname: 'localhost',\n    port: 1234\n}\n```\n\nLoad the config in your app\n\n```js\nvar config = require('app-config');\n\nconsole.log('DB URL:', config.db.hostname + ':' + config.db.port);\n```\n\nRun your app\n\n```bash\nNODE_ENV=dev node you_app.js\n```\n\nLike it? Read on for more details.\n\n# Directory structure\n\nAn example of directory structure required by the tool.\n```\nconfig/\n    dev/\n        db.js\n        log.js\n    prod/\n        db.js\n        log.js\n    db.js\n    log.js\n    ...\n```\nEach environment is a separate directory of the same name. In the example above, we have two environments: `dev` and `prod`.\nConfiguration files are stored within each environment directory. Any sub-directory under an environment directory will be ignored.\n\nConfiguration files located directly under `config/` directory are supported for two reasons:\n\n* They are loaded in case no execution environment is set\n* Allow you to use a build tool (Grunt for example) to assemble the right config files in the root of `config/` directory depending on which environment you are building a package for.\n    * For example, for production packages, you may want to copy only the .js files of `config/prod/` into the package's `config/` directory\n\n# Configuration files' format\n\nJavascript-only files are supported and they must export an object. Example `config/prod/log.js`:\n```js\nmodule.exports = {\n    emitErrors: true,\n\n    fileLogConfig: {\n        filename: '/var/log/app.log',\n        level: 'debug'\n    }\n}\n```\n\n# Usage\n\nWhen calling `require('app-config')`, configuration files are loaded depending on the execution environment,\nwhich is being set by using environmental variables. More on that below.\n\nReturned object upon `require` call for the example directory structure:\n```js\n{\n    log: {\n        emitErrors: true,\n\n        fileLogConfig: {\n            filename: '/var/log/app.log',\n            level: 'debug'\n        }\n    },\n    db: {\n        ...\n    }\n}\n```\n\n### Example usage in a Node.js module\n```js\nvar config = require('app-config');\n\nconsole.log('Log level:', config.log.fileLogConfig.level);\n```\n\n# Configuration options\n\nAll configuration options are available via the environment variables below.\nSome examples of how to set the environmental variables:\n\n* `NODE_ENV=dev  NODE_CONFIG_NO_HALT= node index.js`\n* `NODE_ENV=qa   NODE_CONFIG_DIR='/qa/config/path/' node index.js`\n* `NODE_ENV=prod NODE_CONFIG_LOG= NODE_CONFIG_DIR='/prod/config/path/' node index.js`\n\n### NODE_ENV\n\nEnvironment to be used when requiring the tool. In our example, we have `dev` and `prod`.\n\n### NODE_CONFIG_DIR\n\nConfiguration directory is expected to be called 'config' and to be located in the root of your app/project.\nYou can change this default behavior by setting this option up to whatever path you like.\n\n### NODE_CONFIG_NO_HALT\n\nIf an error occurs during the load of config files, the app is halted unless overridden by defining this option to whatever value.\nFor example, the app is halted if the configuration directory does not exist, if an environment does not exist in `config` directory, etc.\n\nThe app is being halted by executing `process.exit(-1)` command. If the halt is prevented by defining this option,\nthe returned value by the `require` call is `null` and it is up to you to handle this situation.\n\n### NODE_CONFIG_LOG\n\nPrints out information and error messages into console if defined.\n\n# Technical details\n\nThis tool is fully synchronous. I.e. for all file operations, synchronous Node.js functions are being called.\nThis is essential to have the config files loaded immediately upon `require` call.\nSince Node.js caches all `require` calls, this tool will be executed only ones ensuring no performance impact on the app.\n\n## Code's logic insight\n\nThe tool walks through `config/` directory in your app's root (or any other provided directory via configuration) and scans for environment directory.\nWhen found, an object is returned, having properties of the same name as the log files - just the .js extension is stripped out.\n\nObject returned by `require` call on our example directory structure above with `NODE_ENV=prod`:\n```js\n{\n    db:  require(NODE_CONFIG_DIR + '/prod/db.js');\n    log: require(NODE_CONFIG_DIR + '/prod/log.js');\n}\n```\n\nPrior requiring the `db` and `log` modules above, they are deleted from `require.cache`.\nThis will ensure reloading of config files if you intentionally deleted `app-config` module from `require.cache`.\nUseful for unit testing when playing around with properties in object returned upon `require('app-config')`.\n\n# Installation\n\n`npm install app-config`\n\n# Dependencies\n\nThe tool does not depend on any other code. For developers of this tool, `Mocha` and `Should` are the only dependencies for running unit tests.\n\n# Development\n\nIn order to develop this plugin, these steps are required:\n\n* Clone the git repo by running `git clone URL`\n* Go to the newly created directory in Terminal\n* Run `npm install` to download dependencies\n* Run unit tests by `npm test`\n",
  "homepage": "https://github.com/lobodpav/node-app-config",
  "_id": "app-config@0.1.4",
  "dist": {
    "shasum": "09fbcdfa30d02874c12d81e20573e405790b4ff5"
  },
  "_from": "app-config@",
  "_resolved": "https://registry.npmjs.org/app-config/-/app-config-0.1.4.tgz"
}
